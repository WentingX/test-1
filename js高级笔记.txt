第一天
1.javascript是一门基于对象的多范式编程语言

2.面向过程编程：我们自己来设计步骤并且按顺序一步一步的完成目的的编程方式
  面向对象编程：我们找到一个合适的对象，调用对象的方法来完成目的 的编程方式。

面向对象能够取代面向过程吗？
不能，你如果找了一个对象来做事情，那么也需要对象来关注具体实现的过程。
你要做一件事情，此时没有合适的对象帮助你来做这个事情，没有对象，自己创建一个对象，你需要给这个对象具体来设置完成事情的步骤，
所以你还是要使用面向过程的方式来完成事情。

3.什么是对象？
万物皆为对象，对象可以认为是一个数据集或者功能集。

var obj = { name:"jack",age:20,sayHello:function(){

} };

obj.sayHello();

4.面向对象的四个特性：
A.封装性：把具体的实现封闭起来，不让别人看到，但是提供一个可以使用的方式。函数就是封装性的一个体现。
B.继承性：自己没有的东西，从别人那里拿过来，那么就说是你继承了别人的东西
C.多态性：一个方法，根据不同的参数有不同的执行结果，就是所谓的一个方法的多种执行形态
举例：	$("div").css("width");
	$("div").css("width","100px");

D.抽象性:把需要的信息抽取出来的过程就称为抽象


5.js的数据类型：
A.值类型（基本类型）：字符串 string，数字 number，布尔  boolean
B.引用类型（对象类型，复合类型）：对象类型（对象，数组，日期，正则。。。）
C.空类型：Null，Undefined

值类型和空类型的数据是如何进行保存的呢？
在内存中划分一块区域，直接将数据保存在这一块区域就可以了。
这一块区域都是在栈里进行划分出来的。


复合类型（引用类型）的数据是如何保存在内存中的呢？
假设有这样的一句代码被执行的话：var p = { name:"jack" };
此时就会在内存中的堆中划分一块区域用来保存对象的数据（对象的键值对内容）
然后，这块区域在哪里，我们不知道，但是我们会通过赋值将这块区域的位置赋值给p变量，也就是说p变量中保存了对象的地址。
此时我们就可以通过p变量找到堆中的那个对象了。

补充，p变量保存在栈中。


6.值类型和引用类型的赋值特征：
A.值类型的数据赋值是将数据拷贝一份然后进行赋值，此时赋值之后源数据和赋值的数据两者没有关联，当改变其中一个的时候，不会影响
另外一个数据

B.引用类型的数据赋值的时候是将变量中保存的地址拷贝一份然后赋值给另外一个变量，此时两个变量保存的是同一个对象的地址，我们
就说两个变量指向了同一个对象，导致的结果就是当一个变量去改变对象中的数据时，另外一个变量去读取的就是改变之后的值了。


7.值类型和引用类型的传参特征：


function foo( num ){
	num=998;
}

var a = 123;
foo( a );

console.log(a);


function foo2( obj ){
	obj.num=998;
}

var o1 = {num:123};
foo( o1 );

console.log(o1);


8.动态特性：就是动态的为对象添加成员(属性，方法).我们可以使用点语法或者关联数组语法来为对象动态的添加成员。

A.点语法：通过小圆点为对象来添加成员或者访问成员，例：var obj={ }; obj.name = "jack";
B.关联数组语法：通过[ ] 为对象添加成员，或者访问成员。
例：
var obj = { };
//动态的给obj对象添加了属性name，值为jack
obj["name"] = "jack";
var str = "age";
//取得str变量中的值作为属性名
//动态的给obj对象添加了属性age，值为20.
obj[ str ] = 20;

9.构造函数：其实就是一个可以创建对象的函数，但是必须要使用new关键字进行调用。

例：
function Dog(name,color,weight){
	this.name = name;
	this.color = color;
	this.weight = weight;
}

var wangcai = new Dog("旺财","yellow","20kg");
var xiaobai = new Dog("小白","white","5kg");

构造函数的调用和执行过程：
A.执行var wangcai = new Dog("旺财","yellow","20kg");的时候
使用new关键字调用Dog构造函数。具体来说，当使用new关键字调用构造函数的时候，先创建一个新对象（什么成员都没有的对象）。
调用Dog构造函数，当调用Dog构造函数的时候将new出来的新对象的地址赋值给Dog函数内部的this。
也就是说，Dog构造函数中的this可以访问到new出来的新对象。

B.在执行Dog函数内部的代码的时候，执行的就是this.xxx = xxx这样的代码，就给new出来的新对象添加了成员

C.执行完了所有Dog构造函数的代码以后，默认将this作为构造函数的结果返回，此时返回的就是添加好了成员的那个新对象。
最后这个新对象就赋值给了wangcai。






第二天

名词解释：
实例对象：构造函数创建出来的那个对象我们就叫他实例对象
原型：函数创建出来的时候，系统为函数同时创建的一个对象。我们可以通过函数.prototype的方式来访问到这个对象。

1.原型：原型本质来说是一个对象。它从哪里来：当一个函数被创建出来的时候，系统就会为这个函数创建一个原型对象。
当系统创建出来了原型对象之后，我们就可以使用原型对象来实现继承。

如何访问原型？
可以通过构造函数的prototype属性访问原型，因为构造函数的prototype属性保存了原型对象的地址。

我们可以怎样来使用原型？
原型的本质是一个对象，那么原型也可以用来保存数据或者提供功能。

所以我们经常会在原型上添加一些方法，当我们在原型上添加了方法之后，这些方法就可以被构造函数创建出来的对象直接使用。
像这种方式实现的效果，我们就说构造函数创建的对象继承了原型中的方法

例：
function Dog(name,color){
	this.name = name;
	this.color = color;
}
//给原型对象添加一个eat方法
//当我们给原型对象添加方法的时候，这个方法就可以被构造函数创建出来的对象直接使用
Dog.prototype.eat = function(){
	console.log( this.name + "吃骨头");
}

var dahuang = new Dog("大黄","yellow");
dahuang.eat();



2.原型是构造函数的原型属性，因为构造函数通过prototype属性来访问原型，所以我们就称原型是构造函数的原型属性。
实例对象会继承原型（实例对象可以直接使用原型中的成员），所以就将原型称为实例对象的原型对象。



3.使用prototype为原型添加成员的两种方式
A.直接给原型对象添加成员
function Dog(){ } 
//通过点语法给原型添加eat方法
Dog.prototype.eat = function(){

}
//通过关联数组语法给原型添加run方法
Dog.prototype["run"] = function(){

}


B.替换原型对象
function Dog(){ } 
//直接用一个全新的对象替换掉之前的原型对象，此时全新的对象中有什么方法，原型就有什么方法
Dog.prototype = {
	eat:function(){

	}
}

小结：B这种方式会比较常用，因为B这种方式代码比较好管理。

补充：如果使用A形式给原型对象添加成员，是在默认的原型对象上进行操作，而默认的原型对象中有一个constructor属性，这个属性指向原型对应的构造函数。
      如果使用B形式进行替换原型对象的操作，那么替换的对象中有什么，原型中就有什么，替换的对象中如果没有constructor属性，那么就建议自己手写代码加上constructor属性。

重点：constructor属性可以帮助我们确认原型到底是哪一个构造函数的原型。


4.__proto__:这是一个属性，是一个实例对象的属性，实例对象可以通过__proto__来访问原型。

访问原型的方式：
A. 构造函数.prototype
B. 实例对象.__proto__

5.继承：在js中，指的就是对象自己没有的成员，别的对象有这个成员，那么对象就借过这个成员来自己用，就好像自己的一样。
实现继承的方法：原型式继承，指的就是实例对象可以直接访问原型对象上的所有成员，就好像这些成员是实例对象自己的一样。
那么我们就说实例对象继承自原型对象。


6.为什么要使用继承？
实现代码的共享和复用

7.属性搜索原则：如果要访问一个对象的成员，需要进行一个搜索的过程，这样搜索的过程需要参照一种准则，就是属性搜索原则。
如果要访问一个对象的成员，先在对象自己本身中进行查找，如果找到了就直接返回值。
如果没有找到，就继续去对象的原型对象中继续查找，如果找到了就直接返回值。
如果没有找到，就继续去原型对象的原型对象中继续查找，这样一直往上找，找到Object.prototype为止。
如果还没有找到，那代表真的没有，返回undefined。

实例对象 继承自 实例对象的原型  
实例对象的原型 继承自 原型的原型。
这样一层一层的继承的关系结构就称为原型链，也是之后学习的难点。

8.继承的实现方式1：原型式继承
原型式继承实现的步骤：
A.给原型对象添加新的成员
B.创建一个实例对象，让实例对象去访问原型对象中的成员。

9.继承的实现方式2：混入，将一个对象的成员添加到另外一个对象中去。
混入实现的步骤：
A.写一个 混入的方法
B.调用混入的方法将一个对象的成员添加给另一个对象。


例：
function extend( obj , obj1 ){
	for( var k in obj1 ){
		obj[ k ] = obj1[ k ];
	}
}

var o1 = { name:"jack",age:20 };
var o2 = { gender:"male",name:"rose" };

//将o1对象的成员混入到o2对象中去。
extend( o2 , o1 );
//此时o2对象中包含两个对象的所有成员
console.log(o2);

//注意：如果被混入的对象和混入的对象有同名的成员，将会进行覆盖的操作。

例2：
var o = {
	extend:function( obj1 ){
		var args = arguments;
		for(var i=0;i<args.length;i++){
			for( var k in args[i] ){
				//this是什么？谁调用方法谁就是this
				this[ k ] = args[ i ][ k ];
			}
		}
		
	}
}
//
o.extend( { name:"jack" } );
console.log(o)

o.extend( { age:20 },{sayHello:function(){  } } )

10.arguments对象：每一个函数内部都隐含具有一个arguments的对象，这个对象是一个伪数组对象。
这个arguments对象中包含了调用函数时传递的所有参数

function foo(  ){
	//console.log( arguments );
	for(var i=0;i<arguments.length;i++){
		console.log( "第"+(i+1)+"个参数的值是："+arguments[i] );
	}
}


foo(1,'a',{name:"jack"});


11.混合式继承：同时使用原型继承和混入来实现继承。
混合式继承实现的步骤：
A.先给原型对象添加extend方法
B.调用原型对象的extend方法为原型对象混入其他的功能
C.创建实例对象，并且调用实例对象的方法（原型对象上的方法）

例：
function Dog(name){
	this.name = name;
}
//A.先给原型对象添加extend方法
Dog.prototype.extend = function( obj ){
	for(var k in obj){
		this[ k ] = obj[ k ];
	}
}
//B.调用原型对象的extend方法为原型对象混入其他的功能
//此时给原型对象混入了一个飞的功能
Dog.prototype.extend( { fly:function(){
	console.log(this.name+"在天上飞");
} } )

//C.创建实例对象，并且调用实例对象的方法（原型对象上的方法）
var dahuang = new Dog("大黄");
dahuang.fly();


总结：
     	1.原型：本质原型就是一个对象，原型的特点就是在原型上添加的内容实例对象可以直接访问。
	2.继承的实现方式1：原型式继承
	  继承的实现方式2：混入
	  继承的实现方式3：混合式继承（重点）
	3.属性搜索原则：
	4.arguments对象：每一个函数内部都有的一个对象，这个对象中包含了调用函数时传递的所有参数。
	5.原型式继承的实现方式：
		A.直接给原型对象添加方法
		B.替换一个原型对象。

第三天：
1.对象的原型链：凡是对象，都有对应的原型。

function Person(){}
var p = new Person();

上面两句代码产生的原型链结构如下：

p(实例对象)  -->  p.__proto__(实例对象p的原型，即Person.prototype)
-->  p.__proto__.__proto__(实例对象p的原型的原型，即Person.prototype.__proto__,本质就是Object.prototype)  -->  null(Object.prototype就是最顶层的原型)


--> 符号意思就是“继承自”

系统内置对象的原型链：

[] --> Array.prototype --> Object.prototype --> null

小结：所有的对象或者原型对象都直接或者间接的继承自Object.prototype
      所以我们称Object.prototype是所有原型的祖宗。

2.{}也是一个对象，如果你写了一句var obj = {},相当于就是写了var obj = new Object();
注意：一般情况下对象的原型链结构都是3层结构，但是有一个对象比较特殊，只有2层原型链结构
就是{}或者new Object()创建出来的对象。


3.动态函数:根据一段字符串(字符串是可以变化的)来生成一个函数

4.Function：这是一个构造函数，这个Function构造函数可以创建函数对象
使用Function创建函数的语法结构：
var func = new Function( '生成的func函数的参数1','生成的func函数的参数2','生成的func函数的参数n','生成的func函数的函数体' );

练习：定义一个getSum函数，这个函数有两个参数，将第一个参数到第二个参数的所有数字进行求和，例:getSum(10,15)

function getSum( start,end ){
	var sum=0;
	for(var i=start;i<=end;i++){
		sum+=i;
	}
	return sum;
}

var getSum2 = new Function( 'start','end','var sum=0;for(var i=start;i<=end;i++){ sum+=i;}return sum;' );

console.log(getSum(1,10));

console.log(getSum2(1,10));

回顾：创建函数的多种形式
A.new Function()
B.funciton Dog(){}
C.var dog = function(){}

5.arguments:函数内部的一个对象，这个对象包含了调用函数时传递的所有参数

练习：定义一个函数func.调用这个函数时如果只传递了一个参数，则打印该参数
调用这个函数的时候如果传递了两个参数，则将两个参数的和打印出来
调用这个函数的时候如果传递了三个参数，则打印三个参数的平均值。

function func(){
	var args = arguments;
	if(args.length == 1){
		console.log( args[ 0 ] );
	}else if(args.length == 2){
		console.log( args[ 0 ] +args[ 1 ]  );
	}else if(args.length == 3){
		console.log( (args[ 0 ] +args[ 1 ] + args[2]) / 3 );
	}
}

func(10);
func(10,20);
func(10,20,30);

arguments对象就是实现多态性的对象，因为arguments对象可以判断到底传递了几个参数
根据参数的不同来做不同的事情。

多态：同一个函数，执行的时候根据参数的不同会有不同的形态

$("div").css("width");
$("div").css("width","100px");

function css(){
	if(arguments.length == 1){
		取得样式值
	}else if(arguments.length == 1){
		设置样式
	}
}


补充：  函数名.name,函数名.length;
函数名.name:得到函数的名字

function foo(){  };

console.log(foo.name);

var foo2 = function(){};

consoloe.log(foo2.name);

函数名.length:得到定义函数时设置的参数的个数

function foo( a , b , c ){}

console.log(foo.length);


6.深拷贝与浅拷贝：

var obj1 = { name:"jack" };
//obj2变量取得了obj1变量保存的地址，此时两个变量保存是同一个对象的地址。
var obj2 = obj1;

拷贝的定义：将数据复制一份，数据本身和源数据一模一样，但是他们两个是不同的数据

定义一个函数，完成拷贝的操作：

var obj1 = {name:"jack",age:20,gender:"male"};
//obj2变量取得了obj1变量保存的地址，此时两个变量保存是同一个对象的地址。
var obj2 = obj1;
//根据传递的参数obj去拷贝一个与obj对象一模一样的对象
function copy( obj ){
	var newObj = {};
	for(var k in obj){
		newObj[ k ] = obj[ k ];
	}
	return newObj;
}

var obj3 = copy( obj1 );

7.eval函数：eval是系统内置的一个函数，他的作用将参数字符串当做js代码来执行
语法结构：  
	eval(字符串);//把字符串当做js代码来执行

第四天：
名词解析：
	方法，函数：一般来说一个独立的function我们称之为函数，
				一般来说定义在一个对象里面的函数我们称之为方法。

	实例方法：就是实例对象的方法，就是实例对象可以调用的方法
	
	静态方法：就是使用函数名来调用的方法，此时我们说静态方法是添加在函数对象上的一种方法。

	例：
	function foo(){
		var num = 100;
		console.log(num);
	}
	//调用函数，执行函数内部的代码。
	foo();
	//给foo对象添加num方法
	foo.num = function(){
		console.log("hello");
	}
	//这种添加在函数对象上的方法就叫做静态方法
	foo.num();

	//foo函数内部的代码与foo对象中的成员没有任何关系，互相不会产生影响
	foo();
	


1.Object.create ：实现快速的继承，他是实现继承的第四种方式。

例： var obj1 = {name:"jack"};
	 //以obj1对象作为原型创建一个新的实例对象并返回
	 //所以res.__proto__就是obj1对象
	 var res = Object.create(obj1);


2.自调用函数：定义一个函数，立刻将其执行，也称为立即执行函数
(function (){
	console.log(123);
})();

(new Function('console.log("xxx");'))();

练习：定义一个自调用函数，该函数打印123+123的结果。

(function(){
	console.log(123+123);
})()

补充：什么时候应该写自调用函数的代码？
假如你有一段代码只需要执行一次的情况下，我们可以使用自调用函数来执行这段代码。

3.eval可能会使用到的一个地方：在低版本的浏览器中我们会使用eval进行转换。、
我们会使用eval将一个json字符串转换成对象

json：(javascript Object Notation) ,这是一种比较特殊的数据格式，这种数据格式的优点
非常轻量，在网络上传输的速度更快，是现在流行一种数据格式。、

[0,1,2,3]

{"name":"jack","age":20,"gender":"male"};

[
	{"name":"jack","age":20,"gender":"male"},
	{"name":"jack","age":20,"gender":"male"},
	{"name":"jack","age":20,"gender":"male"},
]

4.Function(函数对象)是Function(构造函数)的实例

Function(实例对象)其实就是由Function(构造函数)创建出来
Function(构造函数)的原型属性就是Function.prototype
Function(实例对象)的原型对象就是Function.__proto__

5.instanceof运算符： 判断实例对象和构造函数的原型是否在同一条原型链上。 

语法结构：
	实例对象 instanceof 构造函数

6.预解析：在代码执行之前，先将代码通篇 “浏览” 一遍

预解析的时候是将代码通篇的浏览一遍，这个浏览不是单纯的看一遍，而是要解决一些问题：
A.查看代码中是否有语法错误，如果有语法错误，那么直接就报错
不会执行代码。
B.查看代码中是否有var或者function声明的名字，将这些名字做提升操作。
C.查看当前作用域的作用域范围


补充：关于javascript中可能会出现的错误的两种情况
A.语法错误（SyntaxError）：符号写错了，关键字写错了，语法用错了
如果程序中出现了语法错误，整个程序不会执行任何代码。

B.异常（ReferenceError，TypeError）：引用的变量不存在啊，把属性当做方法来使用。
如果程序中出现了异常，那么异常之前的代码可以正常运行，但是出现异常之后的所有代码都无法执行。

7.js中的变量声明：javascript中使用var关键字来声明变量。

在预解析的时候，如果读取到了代码中有var关键字，就去查看var后面跟的这个名字是否在当前作用环境中是否已经有了这个名字，
如果当前环境中没有这个名字，就将var后面跟的这个名字添加到当前环境中。
如果当前环境中有这个名字，就忽略var。

特点:如果进行了多次的var声明，并且声明的名字一模一样，那么只有第一次var有效，其他的
var无效。

例：
var a = 10;

在进行预解析的时候，看到了var变量声明，将名字a加到当前环境中，预解析完毕。
然后开始执行代码，给a变量进行赋值为10的操作。



第五天：


1.变量名提升：JS代码的执行分成两步，第一步进行所有代码的预解析，第二部进行代码的执行。
在预解析的时候，找到代码中有var的声明，将var后面的名字添加到当前作用域中(如果当前作用域已经有这个名字了，则不再添加)。

然后预解析完毕，开始执行代码，执行代码的时候当我们使用这个变量的时候，发现当前作用域已经有这个变量了，就好像这个变量在代码执行之前就已经定义好了一样，这种可以直接使用变量的情况就是所谓的变量名提升。

2.定义函数的三种形式：
A.声明函数：
func();

function func(){
	console.log("func");
}

func();

B.表达式式定义函数：
var fff = function(){
	console.log("ffff");
}

fff();

C.new Function定义函数：
var func = new Function(...);

在预解析阶段的时候，我们只会处理A这种形式（函数声明）
B，C这两种形式定义的函数，预解析的时候只能识别变量名。

这样的特点会导致什么样的效果呢？
假设我们声明了一个函数，我们可以在任何地方调用这个函数
假设我们使用表达式式定义一个函数，只有在赋值之后才能调用这个函数。

3.函数名提升：在预解析的时候，读取全篇的代码，在代码中如果发现了function关键字声明的函数，会将function关键字后面的函数名添加到当前作用域中，并且设置这个名字就是一个函数。

区分函数声明与函数表达式：
如果是一个独立的使用function关键字声明的函数就是声明式
如果一个函数参与了某种运算，那么它就是函数表达式


4.变量名重复声明的特点：只有第一次声明的变量名有效，后面的var都无效
var a = 123;
var a = 456;
相当于：
var a = 123;
	a = 456;

函数名重复声明的特点：因为如果有同名的函数则后面的覆盖前面的

function foo(){
	console.log(1);
}

function foo(){
	console.log(2);
}

function foo(){
	console.log(3);
}

foo();//打印的是3，因为如果有同名的函数则后面的覆盖前面的

变量名和函数名发生了重复的特点：
function foo(){
	
}

var foo = 123;

5.词法作用域：预解析的时候会确定当前作用域，所谓的当前作用域就是指当前声明的变量名或者函数名可以使用的范围。词法作用域只可以用function来进行限定。当我们定义了一个函数的时候，函数内部是一个全新的作用域， 和全局作用域是不同的作用域。

var age=20;
function foo(){
	console.log(age);
	var age=100;
	console.log(age);
}
foo();

6.词法作用域访问的三条准则：
A.函数外部无法访问函数内部的变量，函数内部可以访问函数外部的变量，只有function可以限定作用域
B.函数内部优先访问当前作用域的变量，如果没有就访问外部的变量。
C.作用域的访问范围参照预解析规则。

7.如果函数传递了参数，应该如何进行预解析？
当函数进行调用时传递了参数，就会在函数内部代码进行预解析之前，在函数内部的作用域添加参数对应的名字，并且赋值。


8.作用域链：当我们去函数内部访问一个变量的时候，先会在函数内部当前作用域中查找是否有该吧变量，如果有，就直接使用，如果没有就继续去函数的外部作用域继续找，如果还没有，就继续去函数的外部作用域的外部作用域继续查找，一直找到全局作用域为止，
如果还没有，返回undefined。这样的一层一层的作用域结构就是作用域链。




第六天：

1.闭包：封闭隔离的空间，比如函数。

2.闭包中的数据外界无法访问，如果放在闭包中的数据我们 不去使用，那数据等于无效
应该需要在特定的情况下使用这些数据，希望提供一种方式让外界可以访问到闭包中的数据。

3.函数是一个对象，他也可以像对象一样进行赋值和传参的操作。

赋值：
function foo(){
	console.log(123);
}
//注意foo后面是没有()，如果是foo()那么实际上调用foo函数并返回结果。
//直接使用foo这个名字进行赋值操作。
var f2 = foo;
//f2调用的效果和foo调用的效果一致。
f2();

传参：
$("div").each(function( index,value ){
	
})

function each( fn ){
	for(var i=0;i<this.length;i++){
		fn( i,this[i] );
	}
}

函数也可以作为返回值：
function foo(){
	var num = 123;
	function f(){
		return num;
	}

	return f;

}


var res = foo();
console.log(res());

4.获取闭包中的数据的方式：
A.直接return数据(这种方式实际上获取的不是数据本身，不建议)
B.return一个函数，在函数中return数据（通过作用域访问规则来间接的访问到闭包中的数据）
但是这种方式也有缺点，如果闭包中有多个数据需要返回，这种方式就不好处理了。

C.return一个对象，在对象中添加多个方法，每个方法去返回对应的数据（建议使用）

5.闭包有什么用？
A.在闭包中存储一些私密性数据(密码，工资)。
B.实现沙箱模式(自调用函数)。

<script src="vue.js"></script>
<script>


(function(){
	var jquery = 123;
	var vue = 566;

	window.itcast = {
		getjquery:function(){
			return jquery;
		}
	};
})();


itcast.getjquery();

</script>


1.作用域链：

2.闭包：函数就是一个闭包。

3.如果在闭包中有数据，我们可以有两种方式获取闭包中的数据
A.返回一个函数，在函数中返回闭包中的数据
B.返回一个对象，对象提供方法返回闭包中的数据。

4.闭包的应用：沙箱模式。
建议：以后所有的代码建议写在自调用函数内部，防止和其他的代码产生冲突。


第七天：

1.定义函数的常用方式：
A.声明式函数：   function foo(){}
B.表达式式函数：  var foo = function(){}
C.Function        var foo = new Function();

2.调用函数的四种常用方式：
A.函数模式
B.方法模式
C.构造器模式
D.上下文模式

3.函数模式： 直接使用 函数名() 来调用函数
function foo(){
	console.log(this);
}

//这就是函数模式调用foo函数，   此时foo函数内部的this就是window
foo();

注意：所有自调用函数都是使用函数模式

4.方法模式： 而是使用一个对象来调用函数（函数必须是这个对象的成员）.
function foo(){
	console.log( this );
}

var obj = {};
obj.f = foo;
//此时使用obj对象来调用foo函数，这种调用的方式成为方法模式，
//此时foo函数中的this就是调用方法的对象obj
obj.f();

var func = function(){  };
//像这种函数对象中拥有的这样一个方法被叫做静态方法。
func.f = foo;
//此时使用func函数对象来调用foo函数，这种调用的方式也是方法模式
//此时foo函数中的this就是调用方法的函数对象func
func.f();

//方法模式的特例
var arr = [];
arr[ 0 ] = foo;
//此时使用arr数组对象中的第0个元素来调用函数foo，这种调用方式也是方法模式
//此时foo函数中的this就是调用方法的那个对象arr
arr[ 0 ]();

obj["f"]();

5.构造器模式：使用new来调用函数的方式

function Person(name){
	console.log(this);
	this.name = name;

}
//此时使用new关键字调用Person函数。所以这种调用的方式就是构造器模式。
//此时Person函数中的this就是new出来的那个新对象。
var p1 = new Person("jack");

补充知识：
如果构造函数中写了return语句会有什么结果？
A.如果return后面跟的是基本类型的数据，依然将this作为构造函数的结果返回
B.如果return后面跟的是引用类型的数据，那么就将这个对象作为构造函数的结果返回，忽略this
C.如果return后面跟的是null，那么依然返回this作为构造函数的结果。

6.上下文调用模式：环境调用模式，借调模式。

上下文调用模式有两种：  call形式    apply形式。

为什么要使用上下文模式来调用函数？
A.希望有一种统一的格式来实现函数的调用(函数模式，方法模式)
B.实现借调的效果，就是对象中没有这个函数，但是对象却可以把这个函数借过来进行调用，就好像他自己的一样。

apply形式调用函数的语法结构：

apply实现函数模式调用：
函数名.apply();
函数名.apply( null );
apply实现函数模式调用，调用函数时函数需要参数：
函数名.apply( null ,[ 参数1,参数2......参数n ] );

apply实现方法模式调用：
函数名.apply( 对象 )
apply实现方法模式调用，调用函数时函数需要参数：
函数名.apply( 对象 ,[ 参数1,参数2......参数n ] );

function sayHello( name ){
	console.log( name +"正在打招呼");
}

sayHello.apply( null , [ "jack" ] );
var obj = {};
//使用上下文调用模式实现方法模式调用，obj对象可以没有sayHello方法，可以直接借用。
sayHello.apply( obj , ["rose"] );

案例：
var persons = [
{name:"jack",age:20,money:998},
{name:"rose",age:22,money:1998},
{name:"oldWang",age:38,money:9998}
];

//求公司里面最高的工资。
//Math.max(998,1998,9998);
Math.max.apply( null, persons.map(function(element,index){ return element.money })  )

call形式调用函数语法结构：
函数模式：
函数名.call( null, 需要传递的参数1,需要传递的参数2,...需要传递的参数N )
方法模式：
函数名.call( 对象, 需要传递的参数1,需要传递的参数2,...需要传递的参数N )

什么时候用call，什么时候用apply？
如果借调的函数不需要任何参数，用谁都行，建议用call
如果借调的函数需要传参，并且参数刚好到在一个数组中，建议使用apply
如果借调的函数只需要一个参数，或者几个不相关的参数，此时可以使用call

7.bind调用模式：绑定调用，就是将一个函数和一个对象绑定起来形成一个新的函数
当我们调用这个新的函数的时候就好像是在使用这个对象调用这个函数一样。
function foo(){
	console.log(this);
}

var obj = {name:"rose"};
//将foo函数和obj对象绑定在一起形成一个新的函数
var newFoo = foo.bind(obj);
//当我们调用newFoo的时候效果就是在使用obj对象调用foo函数。
newFoo();

bind调用模式的优劣：
好处就是调用newFoo的时候永远都是使用obj对象去调用foo函数。
坏处就是调用的对象和函数永远都是那两个东西，没办法做更灵活的处理。

8.包装类型：包装类型就是js为了更加方便的操作基本类型数据，系统为字符串，数字，布尔准备的对象类型。

String   字符串
Number   数字
Boolean  布尔

方法模式：   对象.方法名();
字符串操作：  var str = "abc";   str.charAt( 0 );

小结：包装类型的转换不需要我们进行任何操作，实际上都是由系统来自动转换的。
比如说基本类型的数据调用方法的时候，就会发生转换。
比如说call方法或者apply方法的第一个参数是基本类型数据的时候，也会发生转换。

回顾：
1.调用函数的四种模式，当使用四种模式调用函数时，函数中的this到底是什么。
A.函数模式   this ->  window
B.方法模式   this ->  调用方法的对象
C.构造器模式 this ->  new出来的那个新对象
D.上下文模式 this ->  call和apply的第一个参数，如果第一个参数是null，那么this就是window
call和apply的第一个参数如果不是null，this就是这个参数

2.理解借用构造函数实现继承。

第八天：


1.正则表达式：一个含有需要去匹配内容（文字，元字符）的公式

2.正则表达式对象创建的方式：
A.var one = new RegExp("abc");
B.var two = /abc/;

3.基本元字符：  .   []   ()  |  转义字符\

4.次数限定元字符：  *   ？  +  {n}  {n,}   {n,m}

5.首尾元字符：   ^   $

6.简写元字符： \s  \S   \w \W  \d  \D

7.正则提取：去找字符串中符合正则表达式的内容，将这个内容提取作为结果。

正则提取的语法格式：

var result = 正则表达式对象.exec( 字符串 );

注意：result是一个数组，该数组中包含了字符串中符合正则表达式的内容。

8.设置全局模式：
A.var reg1 = new RegExp("\d+","g");
B.var reg2 = /\d+/g;

当我们已经将正则表达式设置好了全局模式之后，我们就可以通过多次调用exec方法
来取得字符串中所有能够匹配正则表达式的内容。

9.分组提取：当我们设置正则表达式的时候，可以使用()进行分组，当提取的结果出现的时候，()分组的内容也会出现在提取的结果中。

var str = "我叫张三，今年还是单身，出生日期是1990-10-01。";
var reg1 = /(\d+)-\d+-\d+/;

//result得到的是一个数组，第一个元素就是整个正则表达式匹配的结果“1990-10-01”
//数组中的第二个元素就是分组() 匹配的年份，即“1990”
var result = reg1.exec(str);

10.   ?:元字符   这个元字符一般紧跟在(后面，他的意思就是这个分组不做提取

11.   \数字 元字符 ： 反向引用，\1表示引用正则表达式的第一个分组作为需要匹配的内容。

12.贪婪模式：默认情况，正则表达式在进行匹配内容的时候会根据次数限定符尽量多的去匹配内容，

在匹配内容的时候，有可能有特殊情况需要取消贪婪模式：
在次数限定符后面加上?   比如说 \d+?

13否定元字符： [^abc] 除了abc之外的其他字符


回顾：
1.掌握构造函数的定义和调用，要求清楚的了解构造函数执行的过程。
2.了解混入，Object.create两种继承方式的写法
  掌握混合式继承以及原型式继承的写法。
3.了解所有的原型的祖宗是Object.prototype，
	所有的函数的创建者是Function
4.掌握代码预解析的方式，并且能够正常的理解代码执行的步骤和过程。
5.掌握闭包中的数据如何访问，通过return一个对象的方式访问闭包中的数据
6.掌握四种调用函数的方式，重点掌握call和apply的使用方式
	了解ES5中数组的forEach，map，filter，indexOf
7.了解正则表达式的匹配，提取和替换。




es6的新特性：
1.let的特性：A.块级作用域特性 B.先声明后使用 C.不可重复声明同名的变量

{
	console.log(num);//这里会报错，因为let声明的变量必须先声明后使用
	let num = 123;
	console.log(num);
}


{
	
	let num = 123;
	console.log(num);
}

console.log(num);//这里也会报错，因为let声明的变量只能在那一对{  }中使用。

{
	let a=123;
	let a=456;//这里会报错，说a变量已经声明了，所以不允许声明同名的变量
	let a=789;
	console.log(a);
}

2.const声明一个常量：它并不是指声明的这个量无法改动，而从基本数据类型数据的角度来说，就是常量的意思。从对象类型来说，是指变量保存的地址不可改动。

const a = 123;


3.给函数参数设置默认值：
function test(x=1,y=2){
	
}

补充：当设置了函数的参数默认值之后，函数的length将只会计算没有设置默认值的参数个数

4.箭头函数：es6中添加了箭头函数的新语法，箭头函数相当于是定义一个函数

如：var res = () => 5;
相当于：var res = function(){ return 5; }

如：var res2 = (x,y) => x+y;
相当于：var res2 = function(x,y){ return x+y; }

上面是最简化的写法，代码简洁，但是不便于阅读理解，建议初学者使用完整语法：
如：var res3 = (x,y) => { return x+y; }

注意：
箭头函数不可作为构造函数调用，即不能new
箭头函数中没有arguments对象.

5.class语法糖：es6添加了class的语法糖，可以用来定义其他编程语言中的所谓的类。
/*
function Person(name,age,gender){
	this.name = name;
	this.age = age;
	this.gender = gender;
}

Person.prototype.sayHello = function(){
	
}

var p1 = new Person("jack",20,"male");
p1.sayHello();
*/


class Person{
	constructor( name,age,gender ){
		this.name = name;
		this.age = age;
		this.gender = gender;
	}

	sayHello(){
		console.log(this.name+"说你好");
	}
}

var p1 = new Person('rose',19,'female');
p1.sayHello();

